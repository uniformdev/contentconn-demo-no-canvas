import type { NextPage } from "next";
import Head from "next/head";
import { Track } from "@uniformdev/context-react";
import { UniformComposition, UniformSlot } from "@uniformdev/canvas-react";
import { EnrichmentData } from "@uniformdev/context";

import { IPage, ITalk } from "../lib/contentstack";
import { PageComponentsList } from "./PageComponentsList";
import TalksContext from "../lib/talksContext";
import { resolveRenderer } from "../components/composableComponents";
import { RootComponentInstance } from "@uniformdev/canvas";

export type PageProps = {
  preview: boolean;
  page: IPage;
  talks: ITalk[] | undefined;
  composition: RootComponentInstance;
  notFound?: boolean;
};

const Page: NextPage<PageProps> = ({ page, talks, composition }) => {
  const enrichments: EnrichmentData[] = [];
  if (page?.context_enrichment_tags?.name) {
    enrichments.push(...page.context_enrichment_tags.name);
  }

  return (
    <Track behavior={enrichments}>
      <Head>
        <title>ContentConn Demo</title>
        <meta
          name="description"
          content="Generated by create next app, modified with typescript, etc"
        />
      </Head>
      <TalksContext.Provider value={talks}>
        <UniformComposition
          data={composition}
          resolveRenderer={resolveRenderer}
        >
          <UniformSlot name="main" />
        </UniformComposition>

        {page?.components && (
          <PageComponentsList components={page?.components} />
        )}
      </TalksContext.Provider>
    </Track>
  );
};

export default Page;
